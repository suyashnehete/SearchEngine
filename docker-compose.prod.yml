version: "3.8"

services:
  postgres:
    container_name: postgres-search-engine
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USERNAME:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-admin}
      PGDATA: /var/lib/postgresql/data
      POSTGRES_DB: ${DB_NAME:-search_engine}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - search-engine-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-admin}"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - search-engine-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_COMPRESSION_TYPE: snappy
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_PRODUCER_MAX_REQUEST_SIZE: 10485760
      KAFKA_CONSUMER_MAX_PARTITION_FETCH_BYTES: 10485760
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - search-engine-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    container_name: redis-search-engine
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - search-engine-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  discovery:
    build:
      context: ./search_engine_microservice/discovery
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - search-engine-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  config-server:
    build:
      context: ./search_engine_microservice/config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    depends_on:
      - discovery
    networks:
      - search-engine-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-server:
    build:
      context: ./search_engine_microservice/auth-server
      dockerfile: Dockerfile
    container_name: auth-server
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=${DB_USERNAME:-admin}
      - DB_PASSWORD=${DB_PASSWORD:-admin}
      - DB_NAME=${DB_NAME:-search_engine}
    depends_on:
      - postgres
      - discovery
    networks:
      - search-engine-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  gateway:
    build:
      context: ./search_engine_microservice/gateway
      dockerfile: Dockerfile
    container_name: gateway
    ports:
      - "8081:8081"
    depends_on:
      - discovery
      - auth-server
    networks:
      - search-engine-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  crawler:
    build:
      context: ./search_engine_microservice/crawler
      dockerfile: Dockerfile
    container_name: crawler-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=${DB_USERNAME:-admin}
      - DB_PASSWORD=${DB_PASSWORD:-admin}
      - DB_NAME=${DB_NAME:-search_engine}
    depends_on:
      - postgres
      - kafka
      - redis
      - discovery
    networks:
      - search-engine-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  indexer:
    build:
      context: ./search_engine_microservice/indexer
      dockerfile: Dockerfile
    container_name: indexer-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=${DB_USERNAME:-admin}
      - DB_PASSWORD=${DB_PASSWORD:-admin}
      - DB_NAME=${DB_NAME:-search_engine}
    depends_on:
      - postgres
      - kafka
      - discovery
    networks:
      - search-engine-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  query:
    build:
      context: ./search_engine_microservice/query
      dockerfile: Dockerfile
    container_name: query-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=${DB_USERNAME:-admin}
      - DB_PASSWORD=${DB_PASSWORD:-admin}
      - DB_NAME=${DB_NAME:-search_engine}
    depends_on:
      - postgres
      - discovery
    networks:
      - search-engine-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  search-engine-ui:
    build:
      context: ./search-engine-ui
      dockerfile: Dockerfile
    container_name: search-engine-ui
    ports:
      - "4200:80"
    depends_on:
      - gateway
    networks:
      - search-engine-network
    restart: unless-stopped

networks:
  search-engine-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
