server:
  port: ${QUERY_PORT:8084}

eureka:
  instance:
    hostname: localhost
  client:
    service-url:
      defaultZone: http://localhost:${EUREKA_PORT:8761}/eureka/

spring:
    application:
        name: query
    servlet:
        multipart:
            max-file-size: 50MB
    datasource:
        url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:search_engine}
        username: ${DB_USERNAME:admin}
        password: ${DB_PASSWORD:admin}
        driver-class-name: org.postgresql.Driver
        hikari:
            maximum-pool-size: 15
            minimum-idle: 3
            idle-timeout: 300000
            connection-timeout: 20000
            max-lifetime: 1200000
    jpa:
        hibernate:
            ddl-auto: update
        show-sql: false
        properties:
            hibernate:
                format_sql: true
        database: postgresql
        database-platform: org.hibernate.dialect.PostgreSQLDialect
    kafka:
        bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
        producer:
            key-serializer: org.apache.kafka.common.serialization.StringSerializer
            value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
            batch-size: ${KAFKA_PRODUCER_BATCH_SIZE:16384}
            linger-ms: ${KAFKA_PRODUCER_LINGER_MS:5}
            compression-type: ${KAFKA_PRODUCER_COMPRESSION:snappy}
        consumer:
            key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
            group-id: query-service-group
            max-poll-records: ${KAFKA_CONSUMER_MAX_POLL_RECORDS:5}
            properties:
                spring.json.trusted.packages: "*"
    security:
        oauth2:
            resourceserver:
                jwt:
                    jwk-set-uri: http://localhost:${GATEWAY_PORT:8081}/api/auth-server/.well-known/jwks.json

redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    timeout: 2000ms
    database: 0  # Query uses database 0 (default)
    jedis:
        pool:
            max-active: 8
            max-idle: 8
            min-idle: 0
            max-wait: -1ms

# Actuator configuration for health checks and metrics
management:
    endpoints:
        web:
            exposure:
                include: health,info,metrics,prometheus
    endpoint:
        health:
            show-details: always
            show-components: always
    health:
        redis:
            enabled: true
        db:
            enabled: true
    metrics:
        export:
            prometheus:
                enabled: true

logging:
    level:
        com.searchengine.query: ${LOG_LEVEL:INFO}
        org.springframework.kafka: ${LOG_LEVEL:INFO}
        org.springframework.security: ${LOG_LEVEL:INFO}
        org.hibernate.SQL: ${LOG_LEVEL:WARN}
